from job import JobInterface
import spotipy
from spotipy.oauth2 import SpotifyOAuth

class TopPlaylist(JobInterface):
    def __init__(self, time_range: str = 'short_term', limit: int = 25, playlist: str = None, description: str = None) -> None:
        """
        :param time_range: How long ago the algorithm should look for top songs
        :param limit: How many songs should be in the playlist
        :param playlist: The name of the playlist
        """
        self.time_range = time_range
        self.limit = limit
        if playlist:
            self.playlist = playlist
        else:
            self.playlist = f'Top {self.limit} - Scripted'
        if description:
            self.description = description
        else:
            self.description = f'Top {limit} songs generated by script.'
        self.scope = ['user-library-read',
                      # 'user-read-recently-played',
                      # 'user-read-currently-playing',
                      'playlist-read-private',
                      'playlist-modify-private',
                      'playlist-modify-public',
                      'user-top-read'
                      ]

    def run(self) -> None:
        sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope=self.scope))
        user_id = sp.current_user()['id']

        playlist_id = None
        playlists = sp.current_user_playlists()

        for idx, item in enumerate(playlists['items']):
            if item['name'] == self.playlist:
                playlist_id = item['id']
                break

        if playlist_id:
            pass
        else:
            print(f'Playlist not found! -> {self.playlist}')
            print('Creating playlist ...')
            sp.user_playlist_create(user=user_id, name=self.playlist, description=self.description)
            playlists = sp.current_user_playlists()
            for idx, item in enumerate(playlists['items']):
                if item['name'] == self.playlist:
                    playlist_id = item['id']

        # Get all the items in the playlist current and queue them for deletion
        tracks_in_playlist = sp.playlist_items(playlist_id, additional_types=("track",))
        tracks = tracks_in_playlist['items']
        ids_to_remove = []
        for item in tracks:
            ids_to_remove.append(item['track']['id'])

        # Get the top tracks and their ids
        top_tracks = sp.current_user_top_tracks(time_range=self.time_range, limit=self.limit)
        ids_to_add = []
        for i in top_tracks['items']:
            ids_to_add.append(i['id'])

        # Delete all items in the playlist
        sp.playlist_remove_all_occurrences_of_items(playlist_id, ids_to_remove)

        # Add the top tracks to the playlist
        if len(ids_to_add) != 0:
            sp.playlist_add_items(playlist_id, ids_to_add)

