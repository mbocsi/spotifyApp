from spotify_scripts.topplaylist import TopPlaylist
from unittest.mock import patch

def test_init():
    topjob = TopPlaylist()
    assert topjob.time_range == "short_term"
    assert topjob.limit == 25
    assert topjob.playlist == 'Top 25 - Scripted'
    assert topjob.description == 'Top 25 songs generated by script.'
    assert topjob.scope == ['user-library-read',
                            'playlist-read-private',
                            'playlist-modify-private',
                            'playlist-modify-public',
                            'user-top-read'
                            ]
    
    topjob1 = TopPlaylist(time_range='long_term',
                         limit=50,
                         playlist='test',
                         description='test description')
    assert topjob1.time_range == "long_term"
    assert topjob1.limit == 50
    assert topjob1.playlist == 'test'
    assert topjob1.description == 'test description'
    assert topjob1.scope == ['user-library-read',
                            'playlist-read-private',
                            'playlist-modify-private',
                            'playlist-modify-public',
                            'user-top-read'
                            ]

@patch('spotipy.Spotify')
@patch('spotipy.oauth2.SpotifyOAuth.__init__', return_value=None)
def test_run(spotifyOAuth, spotify):
    spotify.return_value.current_user.return_value = {"id": 1}
    spotify.return_value.current_user_playlists.return_value = {"items": [{'name': 'orig', 'id': 23}, {'name': 'new', 'id': 24}]}
    spotify.return_value.playlist_items.return_value = {"items": [{'track': {'id': 2}}]}
    spotify.return_value.current_user_top_tracks.return_value = {"items": [{"id": 3}]}

    mock_spotipy = spotify.return_value

    topjob = TopPlaylist('orig', 'new')
    assert mock_spotipy.current_user.call_count == 0
    assert mock_spotipy.current_user_playlists.call_count == 0
    assert mock_spotipy.current_user_top_tracks.call_count == 0
    assert mock_spotipy.playlist_items.call_count == 0
    assert mock_spotipy.user_playlist_create.call_count == 0
    assert mock_spotipy.playlist_remove_all_occurrences_of_items.call_count == 0
    assert mock_spotipy.playlist_add_items.call_count == 0
    topjob.run()
    assert mock_spotipy.current_user.call_count == 1
    assert mock_spotipy.current_user_playlists.call_count == 2
    assert mock_spotipy.current_user_top_tracks.call_count == 1
    assert mock_spotipy.user_playlist_create.call_count == 1
    assert mock_spotipy.playlist_items.call_count == 1
    assert mock_spotipy.playlist_remove_all_occurrences_of_items.call_count == 1
    assert mock_spotipy.playlist_add_items.call_count == 1