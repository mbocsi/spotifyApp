from spotify_scripts.topplaylist import TopPlaylist
import pytest
from unittest.mock import patch, DEFAULT

@pytest.fixture
def mock_spotipy():
    config = {
        'current_user': DEFAULT,
        'current_user_playlists': DEFAULT,
        'playlist_items': DEFAULT,
        'playlist_remove_all_occurrences_of_items': DEFAULT,
        'current_user_top_tracks': DEFAULT,
        'user_playlist_create': DEFAULT,
        'playlist_add_items': DEFAULT
    }
    with patch.multiple('spotipy.Spotify', **config) as mocked_spotipy:
        mocked_spotipy['current_user'].return_value = {"id": 1}
        mocked_spotipy['current_user_playlists'].return_value = {"items": [{'name': 'orig', 'id': 23}, {'name': 'new', 'id': 24}]}
        mocked_spotipy['playlist_items'].return_value = {"items": [{'track': {'id': 2}}]}
        mocked_spotipy['current_user_top_tracks'].return_value = {"items": [{"id": 3}]}
        yield mocked_spotipy

def test_init():
    topjob = TopPlaylist()
    assert topjob.time_range == "short_term"
    assert topjob.limit == 25
    assert topjob.playlist == 'Top 25 - Scripted'
    assert topjob.description == 'Top 25 songs generated by script.'
    assert topjob.scope == ['user-library-read',
                            'playlist-read-private',
                            'playlist-modify-private',
                            'playlist-modify-public',
                            'user-top-read'
                            ]
    
    topjob1 = TopPlaylist(time_range='long_term',
                         limit=50,
                         playlist='test',
                         description='test description')
    assert topjob1.time_range == "long_term"
    assert topjob1.limit == 50
    assert topjob1.playlist == 'test'
    assert topjob1.description == 'test description'
    assert topjob1.scope == ['user-library-read',
                            'playlist-read-private',
                            'playlist-modify-private',
                            'playlist-modify-public',
                            'user-top-read'
                            ]

def test_run(mock_spotipy):
    topjob = TopPlaylist('orig', 'new')
    assert mock_spotipy['current_user'].call_count == 0
    assert mock_spotipy['current_user_playlists'].call_count == 0
    assert mock_spotipy['current_user_top_tracks'].call_count == 0
    assert mock_spotipy['playlist_items'].call_count == 0
    assert mock_spotipy['user_playlist_create'].call_count == 0
    assert mock_spotipy['playlist_remove_all_occurrences_of_items'].call_count == 0
    assert mock_spotipy['playlist_add_items'].call_count == 0
    topjob.run()
    assert mock_spotipy['current_user'].call_count == 1
    assert mock_spotipy['current_user_playlists'].call_count == 2
    assert mock_spotipy['current_user_top_tracks'].call_count == 1
    assert mock_spotipy['user_playlist_create'].call_count == 1
    assert mock_spotipy['playlist_items'].call_count == 1
    assert mock_spotipy['playlist_remove_all_occurrences_of_items'].call_count == 1
    assert mock_spotipy['playlist_add_items'].call_count == 1